MySQL

--- Local onde os dados ficam armazenados. / my.ini (informações de comunicação de cliente servidor com o banco de dados)
C:\ProgramData\MySQL\MySQL Server 5.7\Data\sys

--- Comandos básicos para manipulação do BD.
SHOW DATABASES;
SHOW TABLES;
DROP DATABASE nome_do_banco; --delete apaga registro de tabela
DROP DATABASE IF EXISTS nome_do_banco;
CREATE DATABASE nome_do_banco;
USE nome_do_banco;

---CURRENT DATABASE:
STATUS; 

--- Construindo tabelas.
CREATE TABLE nome_da_tabela(
	Campo1 		INTEGER			PRIMARY KEY, 
	Campo2		VARCHAR(40)		NOT NULL,
	Campo3		CHAR (2)		NOT NULL,	
	Campo4		INT				NOT NULL		UNIQUE, 
	Campo5      FLOAT			NOT NULL,
	Campo6		ENUM('f','m')	NOT NULL);
	codXXX	    INTEGER,
FOREIGN KEY(codXXX) REFERENCES nome_da_outra_tabela (codYYY)

-- Adicionar campo.
ALTER TABLE nome_da_tabela ADD COLUMN cod_Campo1 INT NOT NULL---DEFAULT 1;

-- Adicionar restrição(CONSTRAINT) de chave estrangeira.
ALTER TABLE nome_da_tabela ADD CONSTRAINT FK_Campo1
FOREIGN KEY(cod_Campo1) REFERENCES Campo2(codCampo2);

-- Adicionar restrição(CONSTRAINT) de campo único.
ALTER TABLE nome_da_tabela ADD CONSTRAINT UNQ_codCampo3 UNIQUE(cod_Campo3);
		
--- Dar carga em tabelas.
DESC nome_da_tabela;
DESCRIBE nome_da_tabela;

INSERT INTO nome_da_tabela VALUES("Campo1", "Campo2", "Campo3", "Campo4"),
						   VALUES("Campo1", "Campo2", "Campo3", "Campo4"),
						   VALUES("Campo1", "Campo2", "Campo3", "Campo4");
						   
INSERT INTO nome_da_tabela(campo1, campo2) VALUES(2, 5), (1, 3), (1, 2), (2, 6), (2, 7), (1, 1), (2, 4);
						   
-- UPDATE para Modificar Registros em Tabelas
UPDATE nome_da_tabela
SET Campo1 = 'set com um novo valor'
WHERE Campo1 = 102

UPDATE nome_da_tabela SET Campo1 = 'set com um novo valor' WHERE Campo5 = 102;

-- Alter Table: Alterar o nome das colunas.
ALTER TABLE nome_da_tabela CHANGE COLUMN Campo6 Campo7 CHAR(2) NOT NULL;

-- Adicionar um novo campo na tabela.
ALTER TABLE nome_da_tabela ADD COLUMN cod_campo8 INT NOT NULL;

--- Query de consulta (> / < / <= / >= / <> / OR / AND / BETWEEN / IN / ORDER BY  ASC ou DESC / LIMIT 'n')
SELECT * FROM nome_da_tabela;
SELECT * FROM nome_da_tabela
	LIMIT 4,5;
	
SELECT Campo1, Campo2, Campo3, Campo4 FROM nome_da_tabela;

SELECT Campo1, Campo3
	FROM nome_da_tabela BE
	WHERE Campo4 IN ("X", "Y") OR Campo2 <> 'w')
	ORDER BY Campo1 DESC LIMIT 'n';
	
SELECT Campo1 AS NovoNome, Campo3 / 5, 
	Campo2 * 0.9 AS "Novo nome sem muita restrição"
	FROM produto
	WHERE Campo5 LIKE '%x';
	
SELECT a.Campo1, b.Campo2, 
	FROM nome_da_tabela a, nome_da_outra_tabela b WHERE Campo4 LIKE '%x%';
	
SELECT Campo1, Campo2, SUBSTRING(Campo6, 3, 20)
	FROM nome_da_tabela WHERE Campo4 LIKE '%x%';
	
SELECT Campo1, Campo2, SUBSTRING(Campo6, 3, LENGTH(Campo6) 20)
	FROM nome_da_tabela WHERE Campo4 LIKE '%x%';
	
SELECT Campo1, Campo2,
	FROM nome_da_tabela INNER JOIN nome_da_outra_tabela
	ON cod_nome_da_tabela = cod_nome_da_outra_tabela
	WHERE Campo5 IS NOT NULL;
	
SELECT Campo1, Campo2,
	FROM nome_da_tabela
	INNER JOIN nome_da_outra_tabela ON cod_nome_da_tabela = cod_nome_da_outra_tabela
	INNER JOIN nome2_da_outra_tabela ON cod_nome2_da_tabela = cod_nome2_da_outra_tabela
	WHERE Campo5 IS NOT NULL;	
	
		       		   
SELECT Campo1, Campo2,
	DATE_FORMAT (Campo1_com_uma_data, '%d/%m/%Y') AS NovoNomeDeCampo
	FROM nome_da_tabela LEFT JOIN nome_da_outra_tabela
	ON cod_nome_da_tabela = cod_nome_da_outra_tabela
	WHERE Campo1 BETWEEN '2019-01-01' AND '2019-03-01';
	
SELECT nome, genero,
	DATE_FORMAT(dataNasc, '%d/%m/%Y') AS Nascimento,
	TRUNCATE(DATEDIFF(NOW(), dataNasc)/365.25, 0) AS Idade
	FROM paciente;
	
-- DELETE - Excluir registros da tabela.
DELETE FROM nome_da_tabela WHERE Campo1 = 'x';

/* 
('YYYY-MM-DD HH:MM:SS')

DATETIME é de '1000-01-01 00:00:00' até '9999-12-31 23:59:59'.
TIMESTAMP é de '1970-01-01 00:00:01' até '2038-01-19 03:14:07'.
*/

SELECT CURRENT_DATE;
SELECT CURRENT_TIME;
SELECT SYSDATE();
SELECT NOW();
SELECT DAY('2016-02-18') AS DIA;
SELECT MONTH('2016-02-18');
SELECT YEAR('2016-02-18');
SELECT DAY(NOW()) AS Dia /* ou */ SELECT MONTH(NOW()) AS Mes;
SELECT DATE_FORMAT('2016-02-18', '%d/%m/%Y') AS DataFormatada;
SELECT DATE_FORMAT(NOW(), '%W, %D %M %Y - Hora: %H:%i') AS DataFormatada;
SELECT ROUND(255.6849, 2);
SELECT ROUND(255.6849, 1); /* arredonda */
SELECT TRUNCATE(255.6849, 1);

-- VIEW - Objeto que armazena uma instrução de pesquisa(QUERY).

CREATE VIEW Nome_da_VIEW AS
SELECT m.nome AS NomeMedico, espec,
	p.nome AS NomePaciente, genero, 
	DATE_FORMAT(dataNasc, '%d/%m/%Y') AS Nascimento,
	TRUNCATE(DATEDIFF(NOW(), dataNasc)/365.25, 0) AS Idade,
	TRUNCATE(DATEDIFF(dataHora, dataNasc)/365.25, 0) AS IdadeConsulta,
	diagnostico,
	DATE_FORMAT(dataHora, '%d/%m/%Y - %H:%i') AS Atendimento
	FROM medico m
	INNER JOIN consulta ON codMedico = cod_med
	INNER JOIN paciente p ON codPaciente = cod_pac;

-- Exportar dados para arquivos.
SELECT * INTO OUTFILE 'C:/ProgramData/MySQL/MySQL Server 5.6/Uploads/Nome_da_tabela.txt'
FROM Nome_da_tabela;

-- Importar dados de um arquivo.
LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 5.6/Uploads/Nome_da_tabela.txt' INTO TABLE copiaNome_da_tabela;	

SELECT * INTO OUTFILE 'C:/ProgramData/MySQL/MySQL Server 5.6/Uploads/Nome_da_tabela.csv' 
	FIELDS TERMINATED BY ';'
	LINES TERMINATED BY '\n'
FROM Nome_da_tabela;
	
-- Criar cópia de tabela sem os dados.
CREATE TABLE copiaNome_da_tabela(LIKE Nome_da_tabela);

-- Metadados
SELECT * FROM INFORMATION_SCHEMA.TABLES
	WHERE  TABLE_SCHEMA = 'Nome_do_banco';

USE INFORMATION_SCHEMA;
DESC COLUMNS;
DESC REFERENTIAL_CONSTRAINTS;

SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE
	FROM COLUMNS WHERE TABLE_NAME = 'nome_da_tabela'
	AND TABLE_SCHEMA = 'Nome_do_banco';
	
SELECT TABLE_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME
	FROM REFERENTIAL_CONSTRAINTS WHERE TABLE_NAME = 'nome_da_tabela'
	AND CONSTRAINT_SCHEMA = 'nome_do_banco';

-- Funções de Agregação - Valores agregados de colunas de resultado.
SELECT COUNT(Campo1) FROM nome_da_tabela;
SELECT SUM(Campo1) FROM nome_da_tabela;
SELECT AVG(Campo1) FROM nome_da_tabela;
SELECT MIN(Campo1) FROM nome_da_tabela;
SELECT MAX(Campo1) FROM nome_da_tabela;

SELECT COUNT(Campo1) AS QTD,
	SUM(Campo1) AS Soma,
	AVG(Campo1) AS Media FROM projeto;

SELECT COUNT(Campo1) AS QTD_Func,
	SUM(Campo1) AS Soma,
	ROUND(AVG(Campo1), 2) AS Media 
	FROM nome_da_tabela INNER JOIN nome_da_outra_tabela
	ON cod_nome_da_tabela = cod_nome_da_outra_tabela;

-- GROUP BY - Diluir o valor da função de agregação pelos valores distintos de uma coluna.
SELECT DISTINCT Campo2 FROM nome_da_tabela;

SELECT campo2, COUNT(campo1) AS QTD
	FROM nome_da_tabela
	GROUP BY campo2;
	
SELECT campo1, COUNT(campo2) AS QTD,
	SUM(campo5) AS Soma,
	ROUND(AVG(campo5), 2) AS Media 
	FROM nome_da_tabela INNER JOIN nome_da_outra_tabela
	ON codCampo2 = cod_campo8
	GROUP BY campo5;

-- WHERE e HAVING
SELECT titulo AS Cargo, COUNT(nome) AS QTD_Func,
	SUM(salario) AS Soma
	FROM cargo INNER JOIN funcionario
	ON codCargo = cod_cargo
	WHERE titulo IN('Estagio', 'Junior', 'Pleno')
	GROUP BY titulo HAVING SUM(salario) > 6000;

-- Cálculo com datas.
SELECT DATE_ADD(NOW(), INTERVAL 220 DAY);
SELECT DATE_ADD(NOW(), INTERVAL -5 MONTH);

SELECT nome, dataInicio, tempPrev, 
	DATE_ADD(dataInicio, INTERVAL tempPrev DAY) AS DataFim
	FROM projeto;

SELECT nome, 
	DATE_FORMAT(dataInicio, '%d/%m/%Y') AS Inicio, tempPrev, 
	DATE_FORMAT(DATE_ADD(dataInicio, INTERVAL tempPrev DAY), '%d/%m/%Y')  AS DataFim
	FROM projeto;

-- ROLLUP - Calcular subtotal.
SELECT genero, estadoCivil, COUNT(nome) AS QTD
	   FROM funcionario
	   GROUP BY genero, estadoCivil WITH ROLLUP;
	   
-- SubQuery
SELECT nome, salario
	   FROM cargo INNER JOIN funcionario
	   ON codCargo = cod_cargo
	   WHERE salario > (SELECT AVG(salario) FROM cargo 
						INNER JOIN funcionario ON codCargo = cod_cargo);
						

---------------------------POSTGRES---------------------------

-- Exibir bases de dados.
\l

-- Conectar a uma base de dados.
\c nome_do_banco;

-- Exibir objetos existentes.
\d nome_da_tabela

-- SEQUENCE - Objeto utilizado para geração de valores sequenciais.

CREATE SEQUENCE nome_da_sequencia START WITH 101;

-- Inserir dados nas tabelas.
INSERT INTO cliente VALUES(NEXTVAL('seqcliente'), 'Ana', 'ana@uol.com', 4000);

-- Programação no PostgreSQL.

-- Função com execução de SQL.
CREATE FUNCTION dadosCliente(cod INT)
	RETURN VARCHAR(200) AS $$
	
		SELECT 'Nome: ' || nome || ' - Email: ' || email
			|| ' - Renda: R$ ' || renda
			FROM cliente WHERE codCliente = cod;
			
$$
LANGUAGE SQL;

SELECT dadosCliente(5);
			
-- Função com linguagem PLPGSQL.

CREATE FUNCTION calcDesconto(valor FLOAT, porcent FLOAT)
	RETURNS FLOAT AS $$
	DECLARE
		resultado FLOAT;
	BEGIN
	
		resultado = valor - (valor * porcent) / 100;
		
		RETURN resultado;
	
	END;
$$
LANGUAGE PLPGSQL;
	
SELECT calcDesconto(100, 3);

SELECT nome, email, renda,
	calcDesconto(renda, 0.87) AS RendaDesconto
	FROM cliente;
	
UPDATE cliente SET renda = calcDesconto(renda, 0.05) WHERE codCliente = 3;
	
-- Função para realizar transações.

CREATE OR REPLACE FUNCTION cadastrarPF(pnome VARCHAR(40), pemail VARCHAR(30), 
									   prenda FLOAT, pcpf CHAR(14), sexo CHAR)
	RETURNS VOID AS $$
	DECLARE
		FK_cliente INT;
	BEGIN 
	
		INSERT INTO cliente VALUES(NEXTVAL('seqcliente'), pnome, pemail, prenda);

		FK_cliente = CURRVAL('seqcliente');
		
		INSERT INTO pessoaFisica VALUES(FK_cliente, pcpf, sexo);
	
		RETURN;
	END;
$$
LANGUAGE PLPGSQL;

--Em Postgres não há ENUM.
CREATE TABLE aluno (
		genero 		CHAR		CHECK(genero = 'f' OR genero = 'm') NOT NULL,
		
--- Exemplo de primary key tripla.		
CREATE TABLE notas (
	anoLetivo 	INTEGER,
	cod_disc 	INTEGER,
	mat_aluno	INTEGER,
	nota1 		FLOAT,
	nota2 		FLOAT,
	nota3 		FLOAT,
PRIMARY KEY(anoLetivo, cod_disc, mat_aluno),
FOREIGN KEY(cod_disc) REFERENCES disciplina (codDisciplina),
FOREIGN KEY(mat_aluno) REFERENCES aluno (matricula));
	
--Consultas
SELECT nome, 
	TO_CHAR(dataNasc, 'dd/mm/yy') AS Nascimento
	FROM aluno;